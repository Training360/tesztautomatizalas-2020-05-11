// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class CreatelocationtestTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public void Gotomain() {
    driver.get("http://localhost:8080/server");
  }
  @Test
  public void createlocationtest() {
    // Test name: Create location test
    // Step # | name | target | value
    // 1 | run | Go to main | 
    Gotomain();
    // 2 | store | Budapest Variable | name
    vars.put("name", "Budapest Variable");
    // 3 | executeScript | return new Date(); | now
    vars.put("now", js.executeScript("return new Date();"));
    // 4 | echo | ${now} | 
    System.out.println(vars.get("now").toString());
    // 5 | times | 5 | 
    Integer times = 5;
    for(int i = 0; i < times; i++) {
      // 6 | click | linkText=Create location | 
      driver.findElement(By.linkText("Create location")).click();
      // 7 | click | id=name-input | 
      driver.findElement(By.id("name-input")).click();
      // 8 | type | id=name-input | ${name}
      driver.findElement(By.id("name-input")).sendKeys(vars.get("name").toString());
      // 9 | click | id=coords-input | 
      driver.findElement(By.id("coords-input")).click();
      // 10 | type | id=coords-input | 1,1
      driver.findElement(By.id("coords-input")).sendKeys("1,1");
      // 11 | click | css=.btn | 
      driver.findElement(By.cssSelector(".btn")).click();
      // 12 | storeText | css=tr:nth-child(2) > td:nth-child(2) | coords
      vars.put("coords", driver.findElement(By.cssSelector("tr:nth-child(2) > td:nth-child(2)")).getText());
      // 13 | echo | ${coords} | 
      System.out.println(vars.get("coords").toString());
      // 14 | assertText | css=tr:nth-child(1) > td:nth-child(2) | ${name}
      assertThat(driver.findElement(By.cssSelector("tr:nth-child(1) > td:nth-child(2)")).getText(), is("vars.get(\"name\").toString()"));
      // 15 | assertText | css=tr:nth-child(2) > td:nth-child(2) | 1.0, 1.0
      assertThat(driver.findElement(By.cssSelector("tr:nth-child(2) > td:nth-child(2)")).getText(), is("1.0, 1.0"));
      // 16 | assertText | css=.alert | Location has been created.
      assertThat(driver.findElement(By.cssSelector(".alert")).getText(), is("Location has been created."));
      // 17 | click | linkText=Back to list | 
      driver.findElement(By.linkText("Back to list")).click();
      // 18 | end |  | 
    }
  }
}
